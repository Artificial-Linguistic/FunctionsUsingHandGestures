import cv2
import mediapipe as mp
from math import hypot
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
import screen_brightness_control as sbc
import numpy as np
 
cap = cv2.VideoCapture(0) #Checks for camera
 
mpHands = mp.solutions.hands #detects hand/finger
hands = mpHands.Hands()   #complete the initialization configuration of hands
mpDraw = mp.solutions.drawing_utils
 
#To access speaker through the library pycaw 
devices = AudioUtilities.GetSpeakers()
interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
volume = cast(interface, POINTER(IAudioEndpointVolume))
volMin,volMax = volume.GetVolumeRange()[:2]
 
while True:
    success,img = cap.read() #If camera works capture an image
    imgRGB = cv2.cvtColor(img,cv2.COLOR_BGR2RGB) #Convert to rgb
    
    #Collection of gesture information
    results = hands.process(imgRGB) #completes the image processing.
 
    lmList = [] #empty list
    if results.multi_hand_landmarks: #list of all hands detected.
        
        for handlandmark in results.multi_hand_landmarks:
            for id,lm in enumerate(handlandmark.landmark): #adding counter and returning it
                # Get finger joint points
                h,w,_ = img.shape
                cx,cy = int(lm.x*w),int(lm.y*h)
                lmList.append([id,cx,cy]) 
            mpDraw.draw_landmarks(img,handlandmark,mpHands.HAND_CONNECTIONS)
    
    if lmList != []:
        x1,y1 = lmList[4][1],lmList[4][2]  #thumb
        x2,y2 = lmList[8][1],lmList[8][2]  #index finger tip
        x3,y3 = lmList[20][1],lmList[20][2]  #pinky finger
        x4,y4 = lmList[5][1],lmList[5][2]  #index finger mcp
        #creating circle at the tips of thumb and index finger
        cv2.circle(img,(x1,y1),13,(255,0,0),cv2.FILLED) #image #fingers #radius #rgb
        cv2.circle(img,(x2,y2),13,(255,0,0),cv2.FILLED) #image #fingers #radius #rgb
        cv2.circle(img,(x3,y3),13,(255,0,0),cv2.FILLED) #image #fingers #radius #rgb
        cv2.circle(img,(x4,y4),13,(255,0,0),cv2.FILLED) #image #fingers #radius #rgb
        cv2.line(img,(x4,y4),(x2,y2),(255,0,0),3)  #create a line b/w tips of index finger tip and index finger mcp
        cv2.line(img,(x1,y1),(x3,y3),(255,0,0),3)  #create a line b/w tips of middle finger and thumb
 
        length1 = hypot(x4-x4,y4-y2) #distance b/w tips using hypotenuse
        length = hypot(x3-x1,y3-y1) #distance b/w tips using hypotenuse
 
        vol = np.interp(length,[30,350],[volMin,volMax]) 
        volbar=np.interp(length,[30,350],[200,100])
        volper=np.interp(length,[30,350],[0,100])
        b_level = np.interp(length1, [15,220], [0,100])
        b_bar=np.interp(length1, [15,220], [400,300])
        b_per=np.interp(length1, [15,220], [0,100])
        
        sbc.set_brightness(int(b_level))
        
        volume.SetMasterVolumeLevel(vol, None)
        

        cv2.rectangle(img,(50,100),(85,200),(255,255,255),2) # vid ,initial position ,ending position ,rgb ,thickness
        cv2.rectangle(img,(50,300),(85,400),(255,255,255),2) # vid ,initial position ,ending position ,rgb ,thickness
        cv2.rectangle(img,(50,int(volbar)),(85,200),(255,0,0),cv2.FILLED)
        cv2.rectangle(img,(50,int(b_bar)),(85,400),(0,0,255),cv2.FILLED)
        cv2.putText(img,f"{int(volper)}% Volume",(10,40),cv2.FONT_ITALIC,1,(255,255,255),3)
        cv2.putText(img,f"{int(b_per)}% Brightness",(10,450),cv2.FONT_ITALIC,1,(255,255,255),3)
        #tell the volume percentage and brightness percentage
    cv2.imshow('Image',img) #Show the video 
    if cv2.waitKey(1) & 0xff==ord(' '): #By using spacebar delay will stop
        break
        
cap.release()     #stop cam       
cv2.destroyAllWindows() #close window
